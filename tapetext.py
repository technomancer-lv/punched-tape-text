#!/usr/bin/python

#      _______________________________________________________
#     /  OOOOO  OOO  OOOO  OOOOO OOOOO OOOOO O   O OOOOO     /
#    /     O   O   O O   O O       O   O     O   O   O      /
#   /      O   O   O O   O O       O   O      O O    O     /
#  /....................................................../
#  \       O   OOOOO OOOO  OOOO    O   OOOO    O     O    \
#   \      O   O   O O     O       O   O      O O    O     \
#    \     O   O   O O     O       O   O     O   O   O      \
#     \    O   O   O O     OOOOO   O   OOOOO O   O   O       \
#
# Program for converting string to 8-bit binary data that
# can be punched into 8-bit punched tape so the text appears on tape
# as symbols using punched holes as pixels. Used font is most likely
# 7-bit high Arial font
#
# Program accepts one input variable - input text. Unprintable symbols
# with ASCII number lower than 0x20 and higher than 0x7E are converted to "?".
# Pure hex data can also be input for creating specific patterns or special
# symbols. For example, '\x1E' will be converted to one output byte 0x1E rather
# than four symbols.
#
# Program outputs binary data, that will be displayed as a mess. So it needs
# to be forwarded somewhere. Output can be written to file with command:
# tapetext "text here" > /some/file
# or can be written directly to preconfigured serial port where tape punch
# is connected:
# tapetext "another text" > /dev/ttyS0
# where ttyS0 is the port where tape punch is connected to.
#

import sys

# Array that holds every letter start address in AsciiData array
AsciiAddr=[
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	1,4,9,16,23,29,36,43,47,51,55,62,69,73,80,84,
	91,98,103,110,117,124,131,138,145,152,159,163,167,173,180,186,
	193,200,207,214,221,228,235,242,249,256,261,268,275,282,289,296,
	303,310,317,324,331,338,345,352,359,366,373,380,385,392,397,404,
	411,415,422,429,436,443,450,456,463,469,473,479,485,489,496,502,
	509,516,523,530,537,543,549,556,563,569,575,581,587,591,597,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]

# Array that holds symbol graphical data. Every symbol data starts with symbol length
AsciiData=[
	0,																	#0|
	2,0x00,0x00,4,0x06,0x5F,0x06,0x00,6,0x07,0x03,0x00,0x07,0x03,0x00,6,0x24,0x7E,0x24,0x7E,0x24,0x00,					#1|  ! " #
	5,0x24,0x2B,0x6A,0x12,0x00,6,0x63,0x13,0x08,0x64,0x63,0x00,6,0x36,0x49,0x56,0x20,0x50,0x00,3,0x03,0x07,0x00,				#23|$ % & '
	3,0x3E,0x41,0x00,3,0x41,0x3E,0x00,6,0x08,0x3E,0x1C,0x3E,0x08,0x00,6,0x08,0x08,0x3E,0x08,0x08,0x00, 					#47|( ) * + 
	3,0x20,0x60,0x00,6,0x08,0x08,0x08,0x08,0x08,0x00,3,0x60,0x60,0x00,6,0x20,0x10,0x08,0x04,0x02,0x00, 					#62|, - . /
	6,0x3E,0x51,0x49,0x45,0x3E,0x00,4,0x42,0x7F,0x40,0x00,6,0x62,0x51,0x49,0x49,0x46,0x00,6,0x22,0x49,0x49,0x49,0x36,0x00,			#91|0 1 2 3
	6,0x18,0x14,0x12,0x7F,0x10,0x00,6,0x2F,0x49,0x49,0x49,0x31,0x00,6,0x3C,0x4A,0x49,0x49,0x30,0x00,6,0x01,0x71,0x09,0x05,0x03,0x00,	#117|4 5 6 7
	6,0x36,0x49,0x49,0x49,0x36,0x00,6,0x06,0x49,0x49,0x29,0x1E,0x00,3,0x6C,0x6C,0x00,3,0x2C,0x6C,0x00,					#145|8 9 : ;
	5,0x08,0x14,0x22,0x41,0x00,6,0x14,0x14,0x14,0x14,0x14,0x00,5,0x41,0x22,0x14,0x08,0x00,6,0x02,0x01,0x59,0x09,0x06,0x00,			#167|< = > ?
	6,0x3E,0x41,0x5D,0x55,0x1E,0x00,6,0x7E,0x11,0x11,0x11,0x7E,0x00,6,0x7F,0x49,0x49,0x49,0x36,0x00,6,0x3E,0x41,0x41,0x41,0x22,0x00,	#193|@ A B C
	6,0x7F,0x41,0x41,0x41,0x3E,0x00,6,0x7F,0x49,0x49,0x49,0x41,0x00,6,0x7F,0x09,0x09,0x09,0x01,0x00,6,0x3E,0x41,0x49,0x49,0x7A,0x00,	#221|D E F G
	6,0x7F,0x08,0x08,0x08,0x7F,0x00,4,0x41,0x7F,0x41,0x00,6,0x30,0x40,0x40,0x40,0x3F,0x00,6,0x7F,0x08,0x14,0x22,0x41,0x00,			#249|H I J K
	6,0x7F,0x40,0x40,0x40,0x40,0x00,6,0x7F,0x02,0x04,0x02,0x7F,0x00,6,0x7F,0x02,0x04,0x08,0x7F,0x00,6,0x3E,0x41,0x41,0x41,0x3E,0x00,	#275|L M N O
	6,0x7F,0x09,0x09,0x09,0x06,0x00,6,0x3E,0x41,0x51,0x21,0x5E,0x00,6,0x7F,0x09,0x09,0x19,0x66,0x00,6,0x26,0x49,0x49,0x49,0x32,0x00,	#303| P Q R S
	6,0x01,0x01,0x7F,0x01,0x01,0x00,6,0x3F,0x40,0x40,0x40,0x3F,0x00,6,0x1F,0x20,0x40,0x20,0x1F,0x00,6,0x3F,0x40,0x3C,0x40,0x3F,0x00,	#331| T U V W
	6,0x63,0x14,0x08,0x14,0x63,0x00,6,0x07,0x08,0x70,0x08,0x07,0x00,5,0x71,0x49,0x45,0x43,0x00,0x00,4,0x7F,0x41,0x41,0x00,			#359|X Y Z [
	6,0x02,0x04,0x08,0x10,0x20,0x00,4,0x41,0x41,0x7F,0x00,6,0x04,0x02,0x01,0x02,0x04,0x00,6,0x40,0x40,0x40,0x40,0x40,0x00,			#385| \ ] ^ _
	3,0x02,0x03,0x00,6,0x20,0x54,0x54,0x54,0x78,0x00,6,0x7F,0x44,0x44,0x44,0x38,0x00,6,0x38,0x44,0x44,0x44,0x28,0x00,			#411| ' a b c d
	6,0x38,0x44,0x44,0x44,0x3F,0x00,6,0x38,0x54,0x54,0x54,0x58,0x00,5,0x08,0x7E,0x09,0x09,0x00,6,0x0C,0x52,0x52,0x52,0x3E,0x00,		#429| d e f g
	5,0x7F,0x04,0x04,0x78,0x00,2,0x7D,0x00,0x00,5,0x20,0x40,0x44,0x3D,0x00,5,0x7F,0x10,0x28,0x44,0x00,					#456| h i j k
	3,0x7F,0x40,0x00,6,0x7C,0x04,0x18,0x04,0x78,0x00,5,0x7C,0x04,0x04,0x78,0x00,6,0x38,0x44,0x44,0x44,0x38,0x00,				#485| l m n o
	6,0x7C,0x24,0x24,0x24,0x18,0x00,6,0x18,0x24,0x24,0x24,0x7C,0x00,6,0x44,0x78,0x44,0x04,0x08,0x00,6,0x08,0x54,0x54,0x54,0x20,0x00,	#509| p q r s
	5,0x04,0x3E,0x44,0x24,0x00,5,0x3c,0x40,0x20,0x7C,0x00,6,0x1C,0x20,0x40,0x20,0x1C,0x00,6,0x3C,0x60,0x30,0x60,0x3C,0x00,			#537| t u v w
	5,0x6C,0x10,0x10,0x6C,0x00,5,0x9C,0xA0,0x60,0x3C,0x00,5,0x64,0x54,0x54,0x4C,0x00,5,0x41,0x41,0x3E,0x08,0x00,				#563| x y z {
	2,0x7F,0x00,0x00,5,0x08,0x3E,0x41,0x41,0x00,6,0x02,0x01,0x02,0x04,0x02,0x00								#587| | } ~
	]

# There should be one argument - text string to be converted.
# Otherwise abort program.

if(len(sys.argv)<2):
	sys.stderr.write("Too few arguments, aborting\n")
        sys.exit()

if(len(sys.argv)>2):
	sys.stderr.write("Too many arguments, aborting\n")
        sys.exit()

# String to be converted is the only argument
PrintString=sys.argv[1]
# Output data that has to be punched on tape
PrintData=""

# Loop that converts input text data to binary output data
CharLoop=0
while CharLoop<len(PrintString):
	PrintChar=PrintString[CharLoop]
	# If unprintable, convert to "?". Or better just ignore?
	if((ord(PrintChar)<0x20)or(ord(PrintChar)>=0x7F)):
		PrintChar="?"
	# If "\x is found, it tries to convert next two symbols to binary output data"
	if(PrintString[CharLoop:CharLoop+2]=="\\x"):
		# If it successfully converts hex variable, it skips four symbols instead of one
		try:
			PrintData+=chr(int(PrintString[CharLoop+2:CharLoop+4],16))
			CharLoop+=3
		except:
			sys.stderr.write("ERROR: hex value not right\n")
			sys.exit()
	else:
		# If printable ASCII characted should be converted
		# it reads character length form array and then reads
		# that count of bytes from data array.
		CharPointer=AsciiAddr[ord(PrintChar)]
		for ByteLoop in range (0,AsciiData[CharPointer]):
			PrintData+=(chr(AsciiData[CharPointer+1+ByteLoop]))
	CharLoop+=1

sys.stdout.write(PrintData)

# That's it!
